BROADCAST_WAP_PUSH = col_logical(),
CALL_PHONE = col_logical(),
CALL_PRIVILEGED = col_logical(),
CAMERA = col_logical(),
CAPTURE_AUDIO_OUTPUT = col_logical(),
CAPTURE_SECURE_VIDEO_OUTPUT = col_logical(),
CAPTURE_VIDEO_OUTPUT = col_logical(),
CHANGE_COMPONENT_ENABLED_STATE = col_logical(),
CHANGE_CONFIGURATION = col_logical(),
CHANGE_NETWORK_STATE = col_logical(),
CHANGE_WIFI_MULTICAST_STATE = col_logical(),
CHANGE_WIFI_STATE = col_logical(),
CLEAR_APP_CACHE = col_logical(),
CONTROL_LOCATION_UPDATES = col_logical(),
DELETE_CACHE_FILES = col_logical(),
DELETE_PACKAGES = col_logical(),
DIAGNOSTIC = col_logical(),
DISABLE_KEYGUARD = col_logical(),
DUMP = col_logical(),
EXPAND_STATUS_BAR = col_logical(),
FACTORY_TEST = col_logical(),
GET_ACCOUNTS = col_logical(),
GET_ACCOUNTS_PRIVILEGED = col_logical(),
GET_PACKAGE_SIZE = col_logical(),
GET_TASKS = col_logical(),
GLOBAL_SEARCH = col_logical(),
INSTALL_LOCATION_PROVIDER = col_logical(),
INSTALL_PACKAGES = col_logical(),
INSTALL_SHORTCUT = col_logical(),
INTERNET = col_logical(),
KILL_BACKGROUND_PROCESSES = col_logical(),
LOCATION_HARDWARE = col_logical(),
MANAGE_DOCUMENTS = col_logical(),
MASTER_CLEAR = col_logical(),
MEDIA_CONTENT_CONTROL = col_logical(),
MODIFY_AUDIO_SETTINGS = col_logical(),
MODIFY_PHONE_STATE = col_logical(),
MOUNT_FORMAT_FILESYSTEMS = col_logical(),
MOUNT_UNMOUNT_FILESYSTEMS = col_logical(),
NFC = col_logical(),
PACKAGE_USAGE_STATS = col_logical(),
PERSISTENT_ACTIVITY = col_logical(),
PROCESS_OUTGOING_CALLS = col_logical(),
READ_CALENDAR = col_logical(),
READ_CALL_LOG = col_logical(),
READ_CONTACTS = col_logical(),
READ_EXTERNAL_STORAGE = col_logical(),
READ_FRAME_BUFFER = col_logical(),
READ_INPUT_STATE = col_logical(),
READ_LOGS = col_logical(),
READ_PHONE_STATE = col_logical(),
READ_SMS = col_logical(),
READ_SYNC_SETTINGS = col_logical(),
READ_SYNC_STATS = col_logical(),
READ_VOICEMAIL = col_logical(),
REBOOT = col_logical(),
RECEIVE_BOOT_COMPLETED = col_logical(),
RECEIVE_MMS = col_logical(),
RECEIVE_SMS = col_logical(),
RECEIVE_WAP_PUSH = col_logical(),
RECORD_AUDIO = col_logical(),
REORDER_TASKS = col_logical(),
REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = col_logical(),
REQUEST_INSTALL_PACKAGES = col_logical(),
RESTART_PACKAGES = col_logical(),
SEND_RESPOND_VIA_MESSAGE = col_logical(),
SEND_SMS = col_logical(),
SET_ALARM = col_logical(),
SET_ALWAYS_FINISH = col_logical(),
SET_ANIMATION_SCALE = col_logical(),
SET_DEBUG_APP = col_logical(),
SET_PREFERRED_APPLICATIONS = col_logical(),
SET_PROCESS_LIMIT = col_logical(),
SET_TIME = col_logical(),
SET_TIME_ZONE = col_logical(),
SET_WALLPAPER = col_logical(),
SET_WALLPAPER_HINTS = col_logical(),
SIGNAL_PERSISTENT_PROCESSES = col_logical(),
STATUS_BAR = col_logical(),
SYSTEM_ALERT_WINDOW = col_logical(),
TRANSMIT_IR = col_logical(),
UNINSTALL_SHORTCUT = col_logical(),
UPDATE_DEVICE_STATS = col_logical(),
USE_FINGERPRINT = col_logical(),
USE_SIP = col_logical(),
VIBRATE = col_logical(),
WAKE_LOCK = col_logical(),
WRITE_APN_SETTINGS = col_logical(),
WRITE_CALENDAR = col_logical(),
WRITE_CALL_LOG = col_logical(),
WRITE_CONTACTS = col_logical(),
WRITE_EXTERNAL_STORAGE = col_logical(),
WRITE_GSERVICES = col_logical(),
WRITE_SECURE_SETTINGS = col_logical(),
WRITE_SETTINGS = col_logical(),
WRITE_SYNC_SETTINGS = col_logical(),
WRITE_VOICEMAIL = col_logical(),
android.net.wifi.p2p.THIS_DEVICE_CHANGED = col_logical(),
android.intent.action.MEDIA_BAD_REMOVAL = col_logical(),
android.intent.action.MEDIA_REMOVED = col_logical(),
android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE = col_logical(),
android.net.wifi.p2p.DISCOVERY_STATE_CHANGE = col_logical(),
android.intent.action.UID_REMOVED = col_logical(),
android.intent.action.MEDIA_BUTTON = col_logical(),
android.bluetooth.headset.action.VENDOR_SPECIFIC_HEADSET_EVENT = col_logical(),
android.bluetooth.a2dp.profile.action.CONNECTION_STATE_CHANGED = col_logical(),
android.net.wifi.NETWORK_IDS_CHANGED = col_logical(),
android.intent.action.MEDIA_SCANNER_STARTED = col_logical(),
android.intent.action.SCREEN_OFF = col_logical(),
android.intent.action.LOCALE_CHANGED = col_logical(),
android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED = col_logical(),
android.intent.action.AIRPLANE_MODE = col_logical(),
android.intent.action.PHONE_STATE = col_logical(),
android.bluetooth.adapter.action.DISCOVERY_STARTED = col_logical(),
android.intent.action.CONFIGURATION_CHANGED = col_logical(),
android.bluetooth.intent.action.REMOTE_DEVICE_CONNECTED = col_logical(),
android.intent.action.ACTION_SHUTDOWN = col_logical(),
android.intent.action.NEW_VOICEMAIL = col_logical(),
android.net.wifi.RSSI_CHANGED = col_logical(),
android.intent.action.PACKAGE_REMOVED = col_logical(),
android.app.action.DEVICE_ADMIN_ENABLED = col_logical(),
android.bluetooth.adapter.action.DISCOVERY_FINISHED = col_logical(),
android.bluetooth.adapter.action.STATE_CHANGED = col_logical(),
android.intent.action.PACKAGE_FULLY_REMOVED = col_logical(),
android.net.scoring.SCORE_NETWORKS = col_logical(),
android.bluetooth.device.action.BOND_STATE_CHANGED = col_logical(),
android.provider.Telephony.SMS_EMERGENCY_CB_RECEIVED = col_logical(),
android.bluetooth.intent.action.NAME_CHANGED = col_logical(),
android.net.wifi.STATE_CHANGE = col_logical(),
android.intent.action.FETCH_VOICEMAIL = col_logical(),
android.speech.tts.TTS_QUEUE_PROCESSING_COMPLETED = col_logical(),
android.bluetooth.device.action.UUID = col_logical(),
android.net.conn.BACKGROUND_DATA_SETTING_CHANGED = col_logical(),
android.bluetooth.pan.profile.action.CONNECTION_STATE_CHANGED = col_logical(),
android.intent.action.BOOT_COMPLETED = col_logical(),
android.nfc.action.ADAPTER_STATE_CHANGED = col_logical(),
android.intent.action.MEDIA_SCANNER_SCAN_FILE = col_logical(),
android.intent.action.ACTION_POWER_CONNECTED = col_logical(),
android.intent.action.USER_PRESENT = col_logical(),
android.intent.action.PACKAGE_RESTARTED = col_logical(),
android.intent.action.UMS_CONNECTED = col_logical(),
android.intent.action.PACKAGE_REPLACED = col_logical(),
android.intent.action.CAMERA_BUTTON = col_logical(),
android.bluetooth.adapter.action.LOCAL_NAME_CHANGED = col_logical(),
android.net.nsd.STATE_CHANGED = col_logical(),
android.bluetooth.a2dp.intent.action.SINK_STATE_CHANGED = col_logical(),
android.bluetooth.devicepicker.action.DEVICE_SELECTED = col_logical(),
android.media.AUDIO_BECOMING_NOISY = col_logical(),
android.intent.action.PACKAGE_VERIFIED = col_logical(),
android.intent.action.MEDIA_EJECT = col_logical(),
android.intent.action.APPLICATION_RESTRICTIONS_CHANGED = col_logical(),
android.net.wifi.supplicant.STATE_CHANGE = col_logical(),
android.bluetooth.intent.action.MODE_CHANGED = col_logical(),
android.bluetooth.intent.action.REMOTE_DEVICE_DISCONNECTED = col_logical(),
android.intent.action.REBOOT = col_logical(),
android.hardware.action.NEW_VIDEO = col_logical(),
android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS = col_logical(),
android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED = col_logical(),
android.intent.action.PROVIDER_CHANGED = col_logical(),
android.bluetooth.intent.action.SCAN_MODE_CHANGED = col_logical(),
android.bluetooth.intent.action.BONDING_REMOVED = col_logical(),
android.bluetooth.intent.action.PAIRING_CANCEL = col_logical(),
android.hardware.action.NEW_PICTURE = col_logical(),
com.google.gservices.intent.action.GSERVICES_CHANGED = col_logical(),
android.bluetooth.intent.action.REMOTE_DEVICE_FOUND = col_logical(),
android.net.wifi.SCAN_RESULTS = col_logical(),
android.media.VIBRATE_SETTING_CHANGED = col_logical(),
android.provider.Telephony.SIM_FULL = col_logical(),
android.bluetooth.intent.action.DISCOVERY_STARTED = col_logical(),
com.google.gservices.intent.action.GSERVICES_OVERRIDE = col_logical(),
android.media.RINGER_MODE_CHANGED = col_logical(),
android.intent.action.DEVICE_STORAGE_LOW = col_logical(),
android.intent.action.DOCK_EVENT = col_logical(),
android.intent.action.BATTERY_OKAY = col_logical(),
android.intent.action.ACTION_POWER_DISCONNECTED = col_logical(),
android.intent.action.MEDIA_NOFS = col_logical(),
android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION = col_logical(),
android.bluetooth.device.action.FOUND = col_logical(),
android.intent.action.DREAMING_STOPPED = col_logical(),
android.bluetooth.device.action.ACL_DISCONNECTED = col_logical(),
android.intent.action.WALLPAPER_CHANGED = col_logical(),
android.app.action.ACTION_PASSWORD_CHANGED = col_logical(),
android.bluetooth.intent.action.BOND_STATE_CHANGED_ACTION = col_logical(),
android.intent.action.PACKAGE_CHANGED = col_logical(),
android.intent.action.DEVICE_STORAGE_OK = col_logical(),
android.intent.action.TIMEZONE_CHANGED = col_logical(),
android.net.wifi.p2p.STATE_CHANGED = col_logical(),
android.app.action.ACTION_PROFILE_PROVISIONING_COMPLETE = col_logical(),
android.provider.Telephony.SMS_RECEIVED = col_logical(),
android.intent.action.BATTERY_LOW = col_logical(),
android.app.action.ACTION_PASSWORD_SUCCEEDED = col_logical(),
android.bluetooth.intent.action.REMOTE_NAME_FAILED = col_logical(),
android.intent.action.DREAMING_STARTED = col_logical(),
android.bluetooth.intent.action.DISABLED = col_logical(),
android.bluetooth.intent.action.REMOTE_NAME_UPDATED = col_logical(),
android.bluetooth.device.action.ACL_CONNECTED = col_logical(),
android.bluetooth.device.action.CLASS_CHANGED = col_logical(),
android.intent.action.MANAGE_PACKAGE_STORAGE = col_logical(),
android.bluetooth.headset.action.AUDIO_STATE_CHANGED = col_logical(),
android.app.action.ACTION_PASSWORD_FAILED = col_logical(),
android.intent.action.NEW_OUTGOING_CALL = col_logical(),
android.bluetooth.input.profile.action.CONNECTION_STATE_CHANGED = col_logical(),
android.app.action.ACTION_PASSWORD_EXPIRING = col_logical(),
android.intent.action.MEDIA_SCANNER_FINISHED = col_logical(),
android.intent.action.GTALK_CONNECTED = col_logical(),
android.bluetooth.intent.action.REMOTE_DEVICE_DISCONNECT_REQUESTED = col_logical(),
android.bluetooth.device.action.PAIRING_REQUEST = col_logical(),
android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED = col_logical(),
android.intent.action.HEADSET_PLUG = col_logical(),
android.intent.action.TIME_TICK = col_logical(),
android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED = col_logical(),
android.net.wifi.WIFI_STATE_CHANGED = col_logical(),
android.intent.action.PACKAGE_DATA_CLEARED = col_logical(),
android.media.SCO_AUDIO_STATE_CHANGED = col_logical(),
android.bluetooth.pan.action.STATE_CHANGED = col_logical(),
android.net.conn.CONNECTIVITY_CHANGE = col_logical(),
android.intent.action.BATTERY_CHANGED = col_logical(),
android.bluetooth.intent.action.BONDING_CREATED = col_logical(),
android.bluetooth.intent.action.REMOTE_ALIAS_CHANGED = col_logical(),
android.intent.action.UMS_DISCONNECTED = col_logical(),
android.bluetooth.devicepicker.action.LAUNCH = col_logical(),
android.intent.action.MEDIA_SHARED = col_logical(),
android.bluetooth.adapter.action.SCAN_MODE_CHANGED = col_logical(),
android.intent.action.TIME_SET = col_logical(),
android.intent.action.MEDIA_UNMOUNTED = col_logical(),
android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED = col_logical(),
android.intent.action.PACKAGE_FIRST_LAUNCH = col_logical(),
android.bluetooth.intent.action.REMOTE_ALIAS_CLEARED = col_logical(),
android.intent.action.PACKAGE_ADDED = col_logical(),
android.intent.action.DATA_SMS_RECEIVED = col_logical(),
android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE = col_logical(),
android.intent.action.DOWNLOAD_COMPLETE = col_logical(),
android.intent.action.MEDIA_CHECKING = col_logical(),
android.intent.action.MEDIA_UNMOUNTABLE = col_logical(),
android.intent.action.PROXY_CHANGE = col_logical(),
android.intent.action.MEDIA_MOUNTED = col_logical(),
android.provider.Telephony.WAP_PUSH_DELIVER = col_logical(),
android.provider.Telephony.WAP_PUSH_RECEIVED = col_logical(),
android.intent.action.MY_PACKAGE_REPLACED = col_logical(),
android.provider.Telephony.SMS_CB_RECEIVED = col_logical(),
android.intent.action.DATE_CHANGED = col_logical(),
android.bluetooth.a2dp.action.SINK_STATE_CHANGED = col_logical(),
android.bluetooth.intent.action.ENABLED = col_logical(),
android.net.wifi.supplicant.CONNECTION_CHANGE = col_logical(),
android.bluetooth.device.action.NAME_CHANGED = col_logical(),
android.intent.action.PACKAGE_NEEDS_VERIFICATION = col_logical(),
android.provider.Telephony.SMS_REJECTED = col_logical(),
android.bluetooth.intent.action.REMOTE_DEVICE_DISAPPEARED = col_logical(),
android.bluetooth.intent.action.HEADSET_ADUIO_STATE_CHANGED = col_logical(),
android.intent.action.PACKAGE_INSTALL = col_logical(),
android.net.wifi.p2p.CONNECTION_STATE_CHANGE = col_logical(),
android.bluetooth.intent.action.DISCOVERY_COMPLETED = col_logical(),
android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION = col_logical(),
android.intent.action.CONTENT_CHANGED = col_logical(),
android.speech.tts.engine.TTS_DATA_INSTALLED = col_logical(),
android.bluetooth.inputdevice.action.INPUT_DEVICE_STATE_CHANGED = col_logical(),
android.bluetooth.headset.action.STATE_CHANGED = col_logical(),
android.bluetooth.a2dp.profile.action.PLAYING_STATE_CHANGED = col_logical(),
android.provider.Telephony.SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED = col_logical(),
android.bluetooth.intent.action.BLUETOOTH_STATE_CHANGED = col_logical(),
android.provider.Telephony.SMS_DELIVER = col_logical(),
android.bluetooth.intent.action.HEADSET_STATE_CHANGED = col_logical(),
android.intent.action.GTALK_DISCONNECTED = col_logical(),
android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED = col_logical(),
android.intent.action.SCREEN_ON = col_logical(),
android.app.action.DEVICE_ADMIN_DISABLED = col_logical(),
android.intent.action.INPUT_METHOD_CHANGED = col_logical(),
android.net.wifi.p2p.PEERS_CHANGED = col_logical(),
android.bluetooth.intent.action.PAIRING_REQUEST = col_logical(),
android.media.ACTION_SCO_AUDIO_STATE_UPDATED = col_logical(),
android.os.action.POWER_SAVE_MODE_CHANGED = col_logical(),
CALENDAR = col_logical(),
CAMERA_1 = col_logical(),
CONTACTS = col_logical(),
LOCATION = col_logical(),
MICROPHONE = col_logical(),
PHONE = col_logical(),
SENSORS = col_logical(),
SMS = col_logical(),
STORAGE = col_logical()))
permissions <- read_csv(paste0(wd$data, "perm-actions1to22.csv"))
permissions <- read_csv(paste0(wd$data, "perm-actions1to22.csv"),
col_types = cols(.default = col_integer(), pkgname = col_character())
permissions <- read_csv(paste0(wd$data, "perm-actions1to22.csv"),
col_types = cols(.default = col_integer(), pkgname = col_character()))
View(permissions)
permissions$pkgname <- gsub(".xml$", "", permissions$pkgname)
permissions <- permissions[complete.cases(permissions), ]
sums <- c(nrow(permissions), colSums(permissions[, -1]))
permissions <- permissions[,-which(sums == 0)]
rm(sums)
permissions$grouped_permission <- 0
permissions[permissions$pkgname == "com.devbydev.whisperofandroid", ]$grouped_permission <- 1
permissions <- permissions[,!names(permissions) %in% c("android.net.scoring.SCORE_NETWORKS",
"android.intent.action.FETCH_VOICEMAIL",
"android.provider.Telephony.SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED")]
# Parameters
fold_cnt <- 5
# Set the working directories
wd <- list()
wd$wd <- paste0(getwd(), "/Bachelor's Project/") # Change to the right folder
wd$code <- paste0(wd$wd, "Code/")
wd$data_preparation <- paste0(wd$code, "Data Preparation/")
wd$data <- paste0(wd$wd, "Data/")
wd$plots <- paste0(wd$wd, "Plots/")
wd$results <- paste0(wd$wd, "Results/")
# Initialization of the program
source(paste0(wd$code, "initialize.R"))
source(paste0(wd$data_preparation, "app_status.R"))
source(paste0(wd$data_preparation, "contextual_data.R"))
source(paste0(wd$data_preparation, "technical_data.R"))
apps <- merge(apps, technical_data, by = "pkgname")
rm(technical_data)
names(apps) <- fix_naming(names(apps))
apps_copy <- apps
apps[,-1] <- apps[complete.cases(apps[,-1]), -1] %>% mutate_if(is.character, as.factor)
class(apps$pkgname)
class(apps$genre)
write.csv(apps, paste0(wd$data, "apps_processed.csv"), row.names = FALSE)
rm(apps_copy)
source(paste0(wd$data_preparation, "one_hot_encoding.R"))
save(apps, file = paste0(wd$data, "apps.Rda"))
write.csv(apps, paste0(wd$data, "apps_encoded.csv"), row.names = FALSE)
apps <- dplyr::arrange(apps, days_since_last_update)
final_test_indices <- seq(1, .2 * nrow(apps))
final_test_set <- apps[final_test_indices, ]
apps <- apps[-final_test_indices, ]
rm(final_test_indices)
# Create a sample of 10% of the data for the model selection and make it balanced
apps_full <- apps # Back-up
apps <- apps[sample.int(n = nrow(apps), size = .1 * nrow(apps)), ]
apps <- downSample(x = apps[,names(apps) != "removed"],
y = as.factor(apps$removed),
yname = "removed")
# Create folds
folds <- createFolds(y = apps$removed, k = fold_cnt)
results <- data.frame()
View(apps)
for (eta in seq(0, .05, .05)) {
# for (eta in seq(0, .5, .05)) {
for (eta in seq(0, .05, .05)) {
cat("eta:", eta, "/.5\n")
# for (min_child_weight in seq(1, 12, 1)) {
for (min_child_weight in seq(1, 2, 1)) {
cat("\tmin_child_weight:", min_child_weight, "/7\n")
# for (max_depth in seq(2, 20, 1)) {
for (max_depth in seq(2, 2, 1)) {
cat("\t\tmax_depth:", max_depth, "/10\n")
# for (gamma in seq(0, 1, .1)) {
for (gamma in seq(0, .1, .1)) {
cat("\t\t\tgamma:", gamma, "/1\n")
errors <- data.frame()
for (i in fold_cnt) {
train_data <- apps[-folds[[i]], -1]
test_data <- apps[folds[[i]], ]
xgboost <- xgboost(data = as.matrix(train_data[, names(train_data) != "removed"]),
label = as.matrix(as.numeric(train_data$removed) - 1),
verbose = 0,
objective = "binary:logistic",
nrounds = 15,
eta = eta,
min_child_weight = min_child_weight,
max_depth = max_depth,
gamma = gamma
)
errors <- rbind(errors, data.frame(actual = test_data$removed,
prediction = predict(xgboost,
as.matrix(test_data[,!names(test_data) %in% c("pkgname", "removed")]))))
}
results <- rbind(results, data.frame(eta = eta,
min_child_weight = min_child_weight,
max_depth = max_depth,
gamma = gamma,
error = mean(abs((as.numeric(errors$actual) - 1) - errors$prediction))))
}
}
}
}
best_options <- results[which.min(results$error), ]
best_options
eta <- best_options$eta
min_child_weight <- best_options$min_child_weight
max_depth <- best_options$max_depth
gamma <- best_options$gamma
rm(fold_cnt, folds, results, errors, i, train_data, test_data, xgboost, best_options)
min_child_weight <- 7
gamma <- .5
eta = .3
max_depth = 20
apps <- downSample(x = apps_full[,names(apps_full) != "removed"],
y = as.factor(apps_full$removed),
yname = "removed")
xgboost <- xgboost(data = as.matrix(apps[, !names(apps) %in% c("pkgname", "removed")]),
label = as.matrix(as.numeric(apps$removed) - 1),
# eta = eta, # Keep eta on its default value
min_child_weight = min_child_weight,
max_depth = 15, # Limit max_depth to 15
gamma = gamma,
verbose = 0,
nrounds = 15,
objective = "binary:logistic"
)
save(xgboost, file = paste0(wd$results, "xgboost"))
rm(eta, min_child_weight, max_depth, gamma)
prediction <- data.frame(pkgname = apps$pkgname,
actual = apps$removed,
estimated_prob_xgboost = predict(xgboost,
as.matrix(apps[, !names(apps) %in% c("pkgname", "removed")])))
source(paste0(wd$code, "get_threshold.R"))
rm(roc, pr)
rm(i, tp, tn, fp, fn)
generate_confusion_matrix(prediction$actual, prediction$estimated_prob_xgboost,
"balanced_training_accuracy", threshold)
generate_confusion_matrix(prediction$actual, prediction$estimated_prob_xgboost,
"balanced_training_accuracy", threshold)
generate_confusion_matrix()
generate_confusion_matrix
generate_confusion_matrix <- function(actual_values, predicted_values, type, threshold) {
actual <- factor(c(FALSE, FALSE, TRUE, TRUE))
prediction <- factor(c(FALSE, TRUE, FALSE, TRUE))
predicted_values <- as.factor(predicted_values >= threshold)
confusion_matrix <- confusionMatrix(predicted_values, as.factor(actual_values))
cnt <- c(confusion_matrix$table)
plot_data <- data.frame(actual, prediction, cnt)
ggplot(plot_data, aes(y = factor(prediction, levels = rev(levels(prediction))), x = actual)) +
geom_tile(aes(fill = cnt), colour = "grey60", alpha = .9) +
geom_text(aes(label = paste(cnt, "\n", round(cnt / length(actual_values) * 100, 1), "%")),
color = "black") +
labs(x = "Reference", y = "Prediction",
title = paste0(round(confusion_matrix$overall * 100, 1), "% accuracy\nThreshold = ",
threshold)) +
scale_fill_gradientn(colours = c("white", "red"), limits = c(0, length(actual_values))) +
theme_bw() + theme(legend.position = "none")
ggsave(filename = paste0(wd$plots, type, ".png"), width = 4, height = 4)
}
generate_confusion_matrix(prediction$actual, prediction$estimated_prob_xgboost,
"balanced_training_accuracy", threshold)
# Evaluate the model on the unbalanced train set
prediction <- data.frame(pkgname = apps_full$pkgname,
actual = apps_full$removed,
estimated_prob_xgboost = predict(xgboost,
as.matrix(apps_full[, !names(apps_full) %in% c("pkgname", "removed")])))
source(paste0(wd$code, "get_threshold.R"))
generate_confusion_matrix(prediction$actual, prediction$estimated_prob_xgboost,
"unbalanced_training_accuracy", threshold)
# Evaluate the model on the unbalanced test set
prediction <- data.frame(pkgname = final_test_set$pkgname,
actual = final_test_set$removed,
estimated_prob_xgboost = predict(xgboost,
as.matrix(final_test_set[, !names(final_test_set) %in% c("pkgname", "removed")])))
source(paste0(wd$code, "get_threshold.R"))
generate_confusion_matrix(prediction$actual, prediction$estimated_prob_xgboost,
"unbalanced_test_accuracy", threshold)
# Plot the feature importance
png(filename = paste0(wd$plots, "feature_importance.png"),
width = 6, height = 5, units = "in", res = 300)
xgb.plot.importance(xgb.importance(model = xgboost), top_n = 15)
dev.off()
library(dplyr)
library(ggplot2)
# TODO: Fill in the path of the folder containing the results (including /).
results_path <- "visualizations/"
results <- read.csv(paste0(results_path, "results.csv"))
setwd('Repos/Modelling and Simulation Project/Modelling-and-Simulation/visualizations/')
setwd('Repos/Modelling and Simulation Project/Modelling-and-Simulation/')
results <- read.csv(paste0(results_path, "results.csv"))
setwd('Repos/Modelling and Simulation Project/Modelling-and-Simulation/')
setwd('Repos/Modelling and Simulation Project/Modelling-and-Simulation')
setwd('Repos/Modelling and Simulation Project/Modelling-and-Simulation/')
results <- read.csv('./results.csv')
View(results)
create_density_plot <- function(data, x_values) {
plot <- ggplot(data = data, mapping = aes_string(x = x_values, color = "model")) +
geom_density() +
labs(x = gsub("_", " ", x_values)) +
scale_color_discrete(name = "Model", labels = c("Clock model", "Local optimum\nwith priority model", "Global optimum\nwith priority model"))
ggsave(filename = paste0(x_values, ".png"), plot = plot, path = paste0(results_path, "figures"), width = 5.5, height = 4)
}
create_density_plot(results, "mean_number_of_steps")
library(dplyr)
library(ggplot2)
create_density_plot(results, "mean_number_of_steps")
create_density_plot <- function(data, x_values) {
plot <- ggplot(data = data, mapping = aes_string(x = x_values, color = "model")) +
geom_density() +
labs(x = gsub("_", " ", x_values)) +
scale_color_discrete(name = "Model", labels = c("Clock model", "Local optimum\nwith priority model", "Global optimum\nwith priority model"))
ggsave(filename = paste0(x_values, ".png"), plot = plot, path = paste0(results_path, "figures"), width = 5.5, height = 4)
}
create_density_plot(results, "mean_number_of_steps")
library(dplyr)
library(ggplot2)
# TODO: Fill in the path of the folder containing the results (including /).
results_path <- "./"
create_density_plot <- function(data, x_values) {
plot <- ggplot(data = data, mapping = aes_string(x = x_values, color = "model")) +
geom_density() +
labs(x = gsub("_", " ", x_values)) +
scale_color_discrete(name = "Model", labels = c("Clock model", "Local optimum\nwith priority model", "Global optimum\nwith priority model"))
ggsave(filename = paste0(x_values, ".png"), plot = plot, path = paste0(results_path, "figures"), width = 5.5, height = 4)
}
create_density_plot(results, "mean_number_of_steps")
create_density_plot(results, "mean_number_of_traffic_lights")
create_density_plot(results, "mean_number_of_waiting_steps")
create_density_plot(results, "simulation_score")
# TODO: maybe ANOVA test to compare all three?
simulation_score_clock <- filter(results, model == 'Clock')$simulation_score
simulation_score_local_optimum <- filter(results, model == 'LocalOptimum')$simulation_score
simulation_score_global_optimum <- filter(results, model == 'GlobalOptimum')$simulation_score
View(results)
aov(results$simulation_score ~ results$model)
summary(aov(results$simulation_score ~ results$model))
